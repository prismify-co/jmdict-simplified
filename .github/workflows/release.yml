name: Release

on:
  schedule:
    - cron: '0 12 1-31/2 * *' # Every odd day (1st, 3rd, 5th, ..., 31st) at 12:00 PM
  workflow_dispatch:
    inputs:
      release_notes:
        description: 'Release notes'
        required: true
        default: 'Updated to the latest version of the source dictionary files'

jobs:
  release:
    name: Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '17'
      - name: Download source files
        run: |
          ./gradlew clean
          ./gradlew download
      - name: Check for updates
        shell: bash
        run: |
          jmdict_updated=$(./gradlew --quiet jmdictHasChanged)
          jmnedict_updated=$(./gradlew --quiet jmnedictHasChanged)
          echo "JMDICT_UPDATED=$jmdict_updated" >> $GITHUB_ENV
          echo "JMNEDICT_UPDATED=$jmnedict_updated" >> $GITHUB_ENV
          if [[ "$jmdict_updated" = "YES" ]] || [[ "$jmnedict_updated" = "YES" ]]; then
            echo "SOMETHING_UPDATED=YES" >> $GITHUB_ENV
          fi
      - name: Convert dictionaries
        if: env.SOMETHING_UPDATED == 'YES'
        run: ./gradlew convert
      - name: Create archives
        if: env.SOMETHING_UPDATED == 'YES'
        run: ./gradlew archive
      - name: Set build info
        if: env.SOMETHING_UPDATED == 'YES'
        run: |
          build_time_human=$(date --utc +'%Y-%m-%d %H:%M:%S UTC')
          build_time_only_numbers=$(date --utc +%Y%m%d%H%M%S)

          build_version_number=$(./gradlew properties | grep 'version: .*' | cut -d' ' -f2 | tr -d '[:space:]')
          build_version_metadata=$build_time_only_numbers
          build_tag="${build_version_number}+${build_version_metadata}"

          echo "BUILD_VERSION_NUMBER=$build_version_number" >> $GITHUB_ENV
          echo "BUILD_VERSION_METADATA=$build_version_metadata" >> $GITHUB_ENV
          echo "BUILD_TAG=$build_tag" >> $GITHUB_ENV
          echo "BUILD_TIME=$build_time_human" >> $GITHUB_ENV
      - name: Set release notes for scheduled releases
        if: env.SOMETHING_UPDATED == 'YES' && !inputs.release_notes
        shell: bash
        run: |
          if [[ "$JMDICT_UPDATED" = "YES" ]] && [[ "$JMNEDICT_UPDATED" = "YES" ]]; then
            RELEASE_NOTES="JMdict and JMnedict were updated."
          elif [[ "$JMDICT_UPDATED" = "YES" ]]; then
            RELEASE_NOTES="JMdict was updated."
          elif [[ "$JMNEDICT_UPDATED" = "YES" ]]; then
            RELEASE_NOTES="JMnedict was updated."
          else
            # this should not happen, but just in case
            RELEASE_NOTES="Distribution files were updated."
          fi
          WARNING="NOTE: This is a scheduled automated release. It may not have been reviewed by a human."
          RELEASE_NOTES="$RELEASE_NOTES\n\n$WARNING"
          echo "RELEASE_NOTES=$RELEASE_NOTES" >> $GITHUB_ENV
      - name: Set release notes for manual releases
        if: env.SOMETHING_UPDATED == 'YES' && inputs.release_notes
        shell: bash
        run: |
          RELEASE_NOTES=${{ inputs.release_notes }}
          echo "RELEASE_NOTES=$RELEASE_NOTES" >> $GITHUB_ENV
      - name: Rename archives # add version build timestamp as version metadata
        if: env.SOMETHING_UPDATED == 'YES'
        run: |
          for f in ./build/distributions/*.zip; do
            mv $f ${f/$BUILD_VERSION_NUMBER/$BUILD_TAG}
          done
          for f in ./build/distributions/*.tgz; do
            mv $f ${f/$BUILD_VERSION_NUMBER/$BUILD_TAG}
          done
      - name: Create release
        if: env.SOMETHING_UPDATED == 'YES'
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # collect assets
          assets=()
          for asset in ./build/distributions/*.zip; do
            assets+=("-a" "$asset")
          done
          for asset in ./build/distributions/*.tgz; do
            assets+=("-a" "$asset")
          done

          message_file=./build/distributions/release-${BUILD_TAG}.md
          touch $message_file

          # create release message
          echo -e "${BUILD_VERSION_NUMBER}, update ${BUILD_TIME}" > $message_file
          echo -e "\n\n${RELEASE_NOTES}" >> $message_file
          echo -e "\n\n## JMdict\n\n" >> $message_file
          cat ./build/dict-json/jmdict-release-info.md >> $message_file
          echo -e "\n\n## JMnedict\n\n" >> $message_file
          cat ./build/dict-json/jmnedict-release-info.md >> $message_file

          # create a release
          hub release create "${assets[@]}" --file $message_file $BUILD_TAG
      - name: Update checksums
        if: env.SOMETHING_UPDATED == 'YES'
        run: ./gradlew updateChecksums
      - name: Commit XML files checksums
        if: env.SOMETHING_UPDATED == 'YES'
        uses: EndBug/add-and-commit@v9
        with:
          add: "checksums/*.sha256"
          message: Update checksum files @ ${{ env.BUILD_TIME }}
